import math
import IPython
import argparse
import os
import chart_studio.plotly
import colorsys
#~ import ipdb
from sc_pseudotime import *
parser = argparse.ArgumentParser(description="runs pseudotime_interactive")
parser.add_argument("-e", "--expression-matrix", dest="expr_mat", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/fetal_census_matrix.csv", help="gene by cell matrix of expression values", metavar="EXPR")
parser.add_argument("-c", "--cell-sets", dest="cell_sets", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/ThreeSeq_Fetal_Metadata_101718.csv", help="cell sets", metavar="CELL_SETS")
parser.add_argument("-p", "--plot-settings", dest="plot_settings", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/101718_3d_PCA_No_Bad_Reads_NoVSX2_3FR_Seq_grp.txt", help="plot settings", metavar="PLOT_SETTINGS")
parser.add_argument("-n", "--session-name", dest="session_name", help="a name to give to this analysis session for reproducbility", metavar="SESSION_NAME", required=False)
try:
options = parser.parse_args()
except SystemExit as err:
if err.code == 2:
parser.print_help()
sys.exit(0)
# ~ load datasets
expression_file = os.path.expanduser(options.expr_mat)
cellset_file    = os.path.expanduser(options.cell_sets)
settings_file   = os.path.expanduser(options.plot_settings)
n_pca = 20
# read settings and cell_set files
sett = settings(settings_file, cellset_file)
# read expression table
expression_table, annotation = read_expression(expression_file, sett)
# calculate PCA
PC_expression,pca = run_PCA(expression_table, annotation, n_pca)
from sc_pseudotime import *
clusters = None
annotation["name"] = "day "+annotation["day"].astype(str)
help(plotly.io.write_html)
help(dict)
annotation
drive_upload("alcells_new1-clustering.pdf")
library(googledrive)
drive_upload("alcells_new1-clustering.pdf")
rstudioapi::navigateToFile("~/.R/snippets/python.snippets")
pt_dict = {pt:pseudotime, ctrl_pt: ctrl_pseudotime}
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
pickle = reticulate::import("pickle")
pickle("script_shortcut.pkl")
pickle.load("script_shortcut.pkl")
test0 <- pickle.load("script_shortcut.pkl")
pickle = reticulate::import("pickle")
test0 <- pickle.load("script_shortcut.pkl")
picle
pickle
pickle.load("script_shortcut.pkl")
pickle$load("script_shortcut.pkl")
gene_trx_list = pickle$load("script_shortcut.pkl", "rb")
pickle$load("script_shortcut.pkl", "rb")
reticulate::source_python("src/pickle_test.py")
test0$sett
test0$expression_table
test0$annotation
test0$PC_expression
test0$pca
test0$PC_expression
test0$expression_table
test0$PC_expression
test0$annotation
library(Seurat)
?CreateSeuratObject
my_seu <- Seurat::CreateSeuratObject(test0$expression_table, meta.data = test0$annotation)
test0$annotation
rownames(test0$annotation)
class(test0$annotation)
data <- test0$expression_table
meta_data <- test0$annotation
head(meta_data)
meta_data <- test0$annotation %>%
data.frame()
meta_data <- test0$annotation %>%
as.data.frame()
head(meta_data)
meta_data
?py_to_r
data <- py_to_r(test0$expression_table)
test0 <- reticulate::py_load_object("script_shortcut.pkl")
test0$expression_table
class(test0$expression_table)
test1 <- test0$expression_table
test1
class(test1)
?py_to_r
data <- py_to_r(test0$expression_table)
head(data)
rownames(data)
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression)
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
head(my_seu)
library(seuratTools)
test2 <- clustering_workflow(list(gene = my_seu))
test2
test0
library(reticulate)
library(seuratTools)
test0 <- reticulate::py_load_object("script_shortcut.pkl")
data <- py_to_r(test0$expression_table)
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression)
# my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
# test2 <- clustering_workflow(list(gene = my_seu))
colnames(data)
?t
?transpose
test1 <- t(data)
dim(test1)
head(test1)
data <- t(data)
rownames(meta_data)
colnames(metadata())
colnames(meta_data
)
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
colnames(my-seu)
colnames(my_seu)
rownames(my_seu)
?seurat_reduce_dimensions
seurat_reduce_dimensions
test1 <- seurat_reduce_dimensions(my_seu)
test1 <- my_seu %>%
Seurat::ScaleData() %>%
# seurat_reduce_dimensions() %>%
identity()
seurat_reduce_dimensions(test1)
dim(test1)
test1 <- my_seu %>%
Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
# seurat_reduce_dimensions() %>%
identity()
seurat_reduce_dimensions(test1)
?seurat_reduce_dimensions
seurat_reduce_dimensions
test1 <- my_seu %>%
Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
seurat_reduce_dimensions() %>%
identity()
test1@reductions$pca
test1@reductions$pca@cell.embeddings
DimPlot(test1, "pca")
?DimPlot
DimPlot(test1, reduction = "pca")
head(pca)
pca$`1`
plot(pca$`1` ~ pca$`2`)
plot(pca$`2` ~ pca$`1`)
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings
seurat_reduce_dimensions
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
# Seurat::ScaleData() %>%
# Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 50)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
# Seurat::ScaleData() %>%
# Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 50) %>%
# seurat_reduce_dimensions() %>%
identity()
head(test1)
rm(test1)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
# Seurat::ScaleData() %>%
# Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 50) %>%
# seurat_reduce_dimensions() %>%
identity()
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
# Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 50) %>%
# seurat_reduce_dimensions() %>%
identity()
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 50) %>%
# seurat_reduce_dimensions() %>%
identity()
head(test1)
DimPlot(test1, reduction = "pca")
plot(pca$`2` ~ pca$`1`)
test1@reductions$pca@cell.embeddings
dim(pca)
head(pca)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings <- pca
class(test1@reductions$pca@cell.embeddings)
matrix(pca)
as.matrix(pca)
test1@reductions$pca@cell.embeddings <- as.matrix(pca)
DimPlot(test1, reduction = "pca")
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
head(test1@reductions$pca@cell.embeddings)
head(test1@reductions$pca@cell.embeddings)
head(as.matrix(pca))
head(test1@reductions$pca@cell.embeddings)
head(as.matrix(pca))
pca <- py_to_r(test0$PC_expression) %>%
as.matrix()
colnames(pca) <- paste0("PC_", colnames(pca))
colnames(pca)
head(as.matrix(pca))
head(test1@reductions$pca@cell.embeddings)
head(as.matrix(pca))
head(test1@reductions$pca@cell.embeddings)
head(as.matrix(pca))
head(test1@reductions$pca@cell.embeddings)
head(as.matrix(pca))
test1@reductions$pca@cell.embeddings <- pca
DimPlot(test1, reduction = "pca")
pca[[1]]
pca[,1]
pca[,2]
plot(pca[,2], pc[,1])
plot(pca[,2], pca[,1])
plot(pca[,1], pca[,2])
DimPlot(test1, reduction = "pca")
velocyto_assay
library(reticulate)
# library(seuratTools)
library(seuratTools, lib.loc = "~/rpkgs/devel_install/")
test0 <- reticulate::py_load_object("script_shortcut.pkl")
data <- py_to_r(test0$expression_table) %>%
t()
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression) %>%
as.matrix()
colnames(pca) <- paste0("PC_", colnames(pca))
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings <- pca
# test2 <- clustering_workflow(list(gene = my_seu))
test2
test2 <- velocyto_assay(test1)
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom/")
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom")
?velocyto_assay
debug(velocyto_assay)
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom")
loom_path
library(loomR)
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom")
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom")
velocyto.R::read.loom.matrices(loom_path)
:q!
test2 <- velocyto_assay(test1, "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom")
colnames(ldat$spliced)
colnames(seu)
colnames(ldat$spliced)
colnames(seu)
colnames(ldat$spliced)
reticulate::repl_python()
test1
colnames(test1)
data
colnames(data)
# rename all files------------------------------
rename_shl <- function(myvec){
myvec <- stringr::str_replace(myvec, "X", "") %>%
stringr::str_pad(width = max(nchar(.)), pad = "0")
paste0("shl20170407-", myvec)
}
rename_shl(colnames(data))
head(pca)
head(meta_data)
library(reticulate)
# library(seuratTools)
library(seuratTools, lib.loc = "~/rpkgs/devel_install/")
test0 <- reticulate::py_load_object("script_shortcut.pkl")
data <- py_to_r(test0$expression_table) %>%
t()
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression) %>%
as.matrix()
# rename all files------------------------------
rename_shl <- function(myvec){
myvec <- stringr::str_replace(myvec, "X", "") %>%
stringr::str_pad(width = max(nchar(.)), pad = "0")
paste0("shl20170407-", myvec)
}
colnames(data) <- rename_shl(colnames(data))
rownames(pca) <- rename_shl(rownames(pca))
rownames(meta_data) <- rename_shl(rownames(meta_data))
# ------------------------------
colnames(pca) <- paste0("PC_", colnames(pca))
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings <- pca
test2 <- velocyto_assay(test1, reduction = "pca")
test0 <- reticulate::py_load_object("script_shortcut.pkl")
test0 <- reticulate::py_load_object("single_cell_tools/script_shortcut.pkl")
test0 <- reticulate::py_load_object("script_shortcut.pkl")
test0 <- reticulate::py_load_object("single_cell_tools/script_shortcut.pkl")
rstudioapi::terminalActivate()
rstudioapi::terminalActivate()
test0 <- reticulate::py_load_object("output/script_shortcut.pkl")
test0$expression_table
library(reticulate)
# library(seuratTools)
library(seuratTools, lib.loc = "~/rpkgs/devel_install/")
test0 <- reticulate::py_load_object("output/script_shortcut.pkl")
data <- py_to_r(test0$expression_table) %>%
t()
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression) %>%
as.matrix()
# rename all files------------------------------
rename_shl <- function(myvec){
myvec <- stringr::str_replace(myvec, "X", "") %>%
stringr::str_pad(width = max(nchar(.)), pad = "0")
paste0("shl20170407-", myvec)
}
colnames(data) <- rename_shl(colnames(data))
rownames(pca) <- rename_shl(rownames(pca))
rownames(meta_data) <- rename_shl(rownames(meta_data))
# ------------------------------
colnames(pca) <- paste0("PC_", colnames(pca))
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings <- pca
test2 <- velocyto_assay(test1, reduction = "pca")
myloom = "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom"
test2 <- velocyto_assay(test1, loom_path = myloom, reduction = "pca")
library(ggplot2)
test2 <- velocyto_assay(test1, loom_path = myloom, reduction = "pca")
library(dplyr)
test2 <- velocyto_assay(test1, loom_path = myloom, reduction = "pca")
test2@misc$vel
plot_velocity_arrows(test, test2@misc$vel, reduction = "pca")
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca")
cell.colors <- tibble::as_tibble(test2$cluster, rownames = "cellid") %>%
tibble::deframe() %>%
as.factor()
cell.colors
levels(cell.colors) <- scales::hue_pal()(length(levels(cell.colors)))
cell.colors
test2 <- velocyto_assay(test1, loom_path = myloom, reduction = "pca", cell.colors = cell.colors)
plot_velocity_arrows
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 1)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 1)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 0.1)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 0.1)
debug(plot_velocity_arrows)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 0.1)
arrow.scale
library(velocyto)
library(velocyto.R)
?show.velocity.on.embedding.cor()
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, arrow.scale = 0.1, plot_format = "grid")
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors plot_format = "grid")
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, plot_format = "grid")
?plot_velocity_arrows
?show.velocity.on.embedding.cor
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, plot_format = "grid")
velocyto.R::show.velocity.on.embedding.cor(emb, velocity,
n = 100, scale = "sqrt", cell.colors = velocyto.R::ac(cell.colors,
alpha = cell.alpha), cex = cell.cex, arrow.scale = arrow.scale,
show.grid.flow = TRUE, min.grid.cell.mass = 4,
grid.n = 20, arrow.lwd = 2)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity,
n = 100, scale = "sqrt", cell.colors = velocyto.R::ac(cell.colors,
alpha = cell.alpha), cex = cell.cex, arrow.scale = arrow.scale,
show.grid.flow = TRUE, min.grid.cell.mass = 0.1,
grid.n = 20, arrow.lwd = 2)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, plot_format = "grid")
velocyto.R::show.velocity.on.embedding.cor(emb, velocity,
n = 100, scale = "sqrt", cell.colors = velocyto.R::ac(cell.colors,
alpha = cell.alpha), cex = cell.cex, arrow.scale = arrow.scale,
show.grid.flow = TRUE, min.grid.cell.mass = 0.1,
grid.n = 20, arrow.lwd = 2)
plot_velocity_arrows(test2, test2@misc$vel, reduction = "pca", cell.colors = cell.colors, plot_format = "grid")
velocyto.R::show.velocity.on.embedding.cor(emb, velocity,
n = 100, scale = "sqrt", cell.colors = velocyto.R::ac(cell.colors,
alpha = cell.alpha), cex = cell.cex, arrow.scale = arrow.scale,
show.grid.flow = TRUE, min.grid.cell.mass = 0.1,
grid.n = 20, arrow.lwd = 2)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity,
n = 100, scale = "sqrt", cell.colors = velocyto.R::ac(cell.colors,
alpha = cell.alpha), cex = cell.cex, arrow.scale = arrow.scale,
show.grid.flow = TRUE, min.grid.cell.mass = 0.1,
grid.n = 20, arrow.lwd = 2)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity, n=100, scale='sqrt',
cell.colors=velocyto.R::ac(cell.colors, alpha=cell.alpha),
cex=cell.cex, arrow.scale=arrow.scale, arrow.lwd=1)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity, n=100, scale='sqrt',
cell.colors=velocyto.R::ac(cell.colors, alpha=cell.alpha),
cex=cell.cex, arrow.scale=arrow.scale, arrow.lwd=2)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity, n=100, scale='sqrt',
cell.colors=velocyto.R::ac(cell.colors, alpha=cell.alpha),
cex=cell.cex, arrow.scale=0.01, arrow.lwd=2)
velocyto.R::show.velocity.on.embedding.cor(emb, velocity, n=100, scale='sqrt',
cell.colors=velocyto.R::ac(cell.colors, alpha=cell.alpha),
cex=cell.cex, arrow.scale=0.01, arrow.lwd=0.5)
?pca.velocity.plot()
pca.velocity.plot(vel)
pca.velocity.plot(velocity)
pca.velocity.plot(velocity, cell.colors = cell.colors)
velocyto.R::pca.velocity.plot(test2@misc$vel, cell.colors = cell.colors)
velocyto.R::pca.velocity.plot(test2@misc$vel, nPCs = 5, cell.colors = cell.colors)
?pca.velocity.plot
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 5, cell.colors = cell.colors)
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 4, cell.colors = cell.colors)
?pca.velocity.plot
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 4, cell.colors = cell.colors, plot.cols = 1)
?pca.velocity.plot
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 4, cell.colors = cell.colors, plot.cols = 1)
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 3, cell.colors = cell.colors, plot.cols = 1)
?pca.velocity.plot
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 3, cell.colors = cell.colors, plot.cols = 1, arrow.scale = 2)
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 3, cell.colors = cell.colors, plot.cols = 1, arrow.scale = 0.5)
pdf("output/sunlee_corr_with_ptime/pc_plots_20170407.pdf")
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 3, cell.colors = cell.colors, plot.cols = 1, arrow.scale = 0.5)
dev.off()
googledrive::drive_upload("output/sunlee_corr_with_ptime/pc_plots_20170407.pdf", "cobrinik_lab/")
reticulate::repl_python()
library(reticulate)
# library(seuratTools)
library(seuratTools, lib.loc = "~/rpkgs/devel_install/")
test0 <- reticulate::py_load_object("for_seurat.pkl")
test0 <- reticulate::py_load_object("single_cell_tools/for_seurat.pkl")
library(reticulate)
# library(seuratTools)
library(seuratTools, lib.loc = "~/rpkgs/devel_install/")
test0 <- reticulate::py_load_object("single_cell_tools/for_seurat.pkl")
data <- py_to_r(test0$expression_table) %>%
t()
meta_data <- py_to_r(test0$annotation)
pca <- py_to_r(test0$PC_expression) %>%
as.matrix()
# rename all files------------------------------
rename_shl <- function(myvec){
myvec <- stringr::str_replace(myvec, "X", "") %>%
stringr::str_pad(width = max(nchar(.)), pad = "0")
paste0("shl20170407-", myvec)
}
colnames(data) <- rename_shl(colnames(data))
rownames(pca) <- rename_shl(rownames(pca))
rownames(meta_data) <- rename_shl(rownames(meta_data))
colnames(pca) <- paste0("PC_", colnames(pca))
my_seu <- Seurat::CreateSeuratObject(data, meta.data = meta_data)
test1 <- my_seu %>%
# Seurat::NormalizeData() %>%
Seurat::ScaleData() %>%
Seurat::FindVariableFeatures() %>%
Seurat::RunPCA(npcs = 20) %>%
# seurat_reduce_dimensions() %>%
identity()
DimPlot(test1, reduction = "pca")
test1@reductions$pca@cell.embeddings <- pca
myloom = "~/single_cell_projects/sc_RB_devel/20170407-SHL-FACS-Hs_proj/output/velocyto/20170407-SHL-FACS-Hs_proj.loom"
test2 <- velocyto_assay(test1, loom_path = myloom, reduction = "pca")
cell.colors <- tibble::as_tibble(test2$cluster, rownames = "cellid") %>%
tibble::deframe() %>%
as.factor()
levels(cell.colors) <- scales::hue_pal()(length(levels(cell.colors)))
pdf("output/sunlee_corr_with_ptime/pc_plots_20170407.pdf")
velocyto.R::pca.velocity.plot(test2@misc$vel, nPcs = 3, cell.colors = cell.colors, plot.cols = 1, arrow.scale = 0.5)
dev.off()
repl_python()
rstudioapi::terminalActivate()
