import pandas as pd
import matplotlib.pyplot as plt
import sys
import numpy as np
import scipy as sc
import sklearn
from sklearn import decomposition
from sklearn import cluster
import seaborn as sns
import math
import IPython
import mygene
import statsmodels.api as sm
import copy # needed to copy class settings
from matplotlib.backends.backend_pdf import PdfPages
# import plotly.plotly as py
import chart_studio.plotly as py
import plotly.graph_objs as go
#~ import plotly.graph_objs as go
#modules for heatmap plotting
from plotly.graph_objs import *
import plotly.figure_factory as FF
from scipy.spatial.distance import pdist, squareform
import re
import matplotlib.cm as cm
import pickle
import colorlover as cl
import ipdb
import os
import pandas as pd
import matplotlib
matplotlib.use('Agg') #for handling display variable on mac (SHL!)
import matplotlib.pyplot as plt
import sys
import numpy as np
import scipy as sc
import scipy.cluster.hierarchy as sch
import sklearn
import seaborn as sns
import math
import IPython
import argparse
import os
import chart_studio.plotly
import colorsys
#~ import ipdb
from sc_pseudotime import *
from sc_pseudotime import *
parser = argparse.ArgumentParser(description="runs pseudotime_interactive")
parser.add_argument("-e", "--expression-matrix", dest="expr_mat", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/fetal_census_matrix.csv", help="gene by cell matrix of expression values", metavar="EXPR")
parser.add_argument("-c", "--cell-sets", dest="cell_sets", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/ThreeSeq_Fetal_Metadata_101718.csv", help="cell sets", metavar="CELL_SETS")
parser.add_argument("-p", "--plot-settings", dest="plot_settings", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/101718_3d_PCA_No_Bad_Reads_NoVSX2_3FR_Seq_grp.txt", help="plot settings", metavar="PLOT_SETTINGS")
parser.add_argument("-n", "--session-name", dest="session_name", help="a name to give to this analysis session for reproducbility", metavar="SESSION_NAME", required=False)
try:
options = parser.parse_args()
except SystemExit as err:
if err.code == 2:
parser.print_help()
sys.exit(0)
# ~ load datasets
expression_file = os.path.expanduser(options.expr_mat)
cellset_file    = os.path.expanduser(options.cell_sets)
settings_file   = os.path.expanduser(options.plot_settings)
n_pca = 20
# read settings and cell_set files
sett = settings(settings_file, cellset_file)
# read expression table
expression_table, annotation = read_expression(expression_file, sett)
# calculate PCA
PC_expression,pca = run_PCA(expression_table, annotation, n_pca)
sett = settings(settings_file, cellset_file)
#!/usr/bin/env python
import pandas as pd
import matplotlib
matplotlib.use('Agg') #for handling display variable on mac (SHL!)
import matplotlib.pyplot as plt
import sys
import numpy as np
import scipy as sc
import scipy.cluster.hierarchy as sch
import sklearn
import seaborn as sns
import math
import IPython
import argparse
import os
import chart_studio.plotly
import colorsys
#~ import ipdb
from sc_pseudotime import *
parser = argparse.ArgumentParser(description="runs pseudotime_interactive")
parser.add_argument("-e", "--expression-matrix", dest="expr_mat", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/fetal_census_matrix.csv", help="gene by cell matrix of expression values", metavar="EXPR")
parser.add_argument("-c", "--cell-sets", dest="cell_sets", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/ThreeSeq_Fetal_Metadata_101718.csv", help="cell sets", metavar="CELL_SETS")
parser.add_argument("-p", "--plot-settings", dest="plot_settings", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/101718_3d_PCA_No_Bad_Reads_NoVSX2_3FR_Seq_grp.txt", help="plot settings", metavar="PLOT_SETTINGS")
parser.add_argument("-n", "--session-name", dest="session_name", help="a name to give to this analysis session for reproducbility", metavar="SESSION_NAME", required=False)
try:
options = parser.parse_args()
except SystemExit as err:
if err.code == 2:
parser.print_help()
sys.exit(0)
# ~ load datasets
expression_file = os.path.expanduser(options.expr_mat)
cellset_file    = os.path.expanduser(options.cell_sets)
settings_file   = os.path.expanduser(options.plot_settings)
n_pca = 20
# read settings and cell_set files
sett = settings(settings_file, cellset_file)
# read expression table
expression_table, annotation = read_expression(expression_file, sett)
# calculate PCA
expression_table
PC_expression
PC_expression,pca = run_PCA(expression_table, annotation, n_pca)
expression_table, annotation = read_expression(expression_file, sett)
#!/usr/bin/env python
import pandas as pd
import matplotlib
matplotlib.use('Agg') #for handling display variable on mac (SHL!)
import matplotlib.pyplot as plt
import sys
import numpy as np
import scipy as sc
import scipy.cluster.hierarchy as sch
import sklearn
import seaborn as sns
import math
import IPython
import argparse
import os
import chart_studio.plotly
import colorsys
#~ import ipdb
from sc_pseudotime import *
parser = argparse.ArgumentParser(description="runs pseudotime_interactive")
parser.add_argument("-e", "--expression-matrix", dest="expr_mat", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/fetal_census_matrix.csv", help="gene by cell matrix of expression values", metavar="EXPR")
parser.add_argument("-c", "--cell-sets", dest="cell_sets", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/ThreeSeq_Fetal_Metadata_101718.csv", help="cell sets", metavar="CELL_SETS")
parser.add_argument("-p", "--plot-settings", dest="plot_settings", default="~/python_packages/single_cell_tools/dshayler_input/3_Fetal_Seq/101718_3d_PCA_No_Bad_Reads_NoVSX2_3FR_Seq_grp.txt", help="plot settings", metavar="PLOT_SETTINGS")
parser.add_argument("-n", "--session-name", dest="session_name", help="a name to give to this analysis session for reproducbility", metavar="SESSION_NAME", required=False)
try:
options = parser.parse_args()
except SystemExit as err:
if err.code == 2:
parser.print_help()
sys.exit(0)
# ~ load datasets
expression_file = os.path.expanduser(options.expr_mat)
cellset_file    = os.path.expanduser(options.cell_sets)
settings_file   = os.path.expanduser(options.plot_settings)
n_pca = 20
# read settings and cell_set files
sett = settings(settings_file, cellset_file)
# read expression table
expression_table, annotation = read_expression(expression_file, sett)
# calculate PCA
PC_expression,pca = run_PCA(expression_table, annotation, n_pca)
from sc_pseudotime import *
clusters = None
annotation["name"] = "day "+annotation["day"].astype(str)
help(plotly.io.write_html)
help(dict)
annotation
