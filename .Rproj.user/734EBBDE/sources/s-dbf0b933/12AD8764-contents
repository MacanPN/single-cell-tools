---
title: "reticulate_gene_correlation.Rmd"
author: "Kevin Stachelek"
date: "12/10/2018"
output: html_document
runtime: shiny
---

```{r setup, include=FALSE, echo = F}
knitr::opts_chunk$set(echo = F, message = F)
```

```{r load-lib}
library(reticulate)
library(shiny)
library(tidyverse)
library(here)
library(annotables)
library(furrr)
library(shinycssloaders)
library(SingleCellExperiment)
```

```{r select-sce, eval = T}
selectInput("experiment", "Experiment:",
						c("DS 1st experiment" = "ds20170407",
						"DS 2nd experiment" = "ds20171031",
						"DS 3rd exeriment" = "ds20181001",
						"SHL 1st experiment" = "shl20170407",
						"SHL 2nd experiment" = "shl20171031"), selected = "shl20170407" )


actionButton("loadButton", "Load Dataset")
```


```{r load-sce, eval = T}

# sce <- eventReactive(input$loadButton, {
# 	sce <- readRDS(paste0(here(), "/single_cell_boxplot/", input$experiment, ".rds"))
#   })

sce <- eventReactive(input$loadButton, {
	showModal(modalDialog("Loading Data", footer=NULL))
	sce <- readRDS(paste0(here(), "/single_cell_boxplot/", input$experiment, ".rds"))
	removeModal()
	return(sce)
  })

output$sce_name <- renderText({
    metadata(sce())
  })

textOutput("sce_name")



```

```{r, eval = F}
# present_trx <- tibble(enstxp = rownames(sce))

# gene_trx_list <- grch38_tx2gene %>% 
# 	dplyr::left_join(present_trx, by = "enstxp") %>% 
# 	dplyr::left_join(grch38, by = "ensgene") %>% 
# 	split(.$ensgene) 
# 
# names(gene_trx_list) <- sapply(gene_trx_list, function(x) x$symbol[1])
# 	
# gene_trx_list <- lapply(gene_trx_list, "[[", "enstxp")

sce_trx <- as_tibble(counts(sce), rownames = "enstxp")

grch38_cols <- c("ensgene", "entrez","chr", "start", "end", "strand", "biotype", "description")

gene_trx_counts <- grch38_tx2gene %>%
	dplyr::left_join(sce_trx, by = "enstxp") %>%
	dplyr::left_join(grch38, by = "ensgene") %>%
	dplyr::select(-grch38_cols) %>% 
	dplyr::group_by(symbol) %>% 
	summarise_at(vars(-enstxp, -symbol), funs(sum)) %>%
	na.omit() %>% 
	identity()




```


```{r create-base-ui}

fileInput("cell_sets", "cell sets as tsv or txt", multiple = F)

radioButtons("corr_method", "method of correlation (spearman or pearson)", choices = c("spearman", "pearson"), selected = "spearman")

radioButtons("feature", "feature of interest; either 'gene' or 'transcript' depending on desired output", choices = c("gene", "transcript"), selected = "transcript")

textInput("outfile", "a descriptive name for the output file", value = "gene_corr_with_ptime")

fileInput("pseudotime", "experimental cells. a list of pseudotime values.", multiple = T)

fileInput("ctrl_pseudotime", "control cells. a list of pseudotime values. Can accept multiple values", multiple = T)


```


```{r}

# pseudotime_files <- c("/home/skevin/single_cell_tools/FACS_0407_2017_SHL_input_files/733_PC4-5.csv", "/home/skevin/single_cell_tools/FACS_0407_2017_SHL_input_files/737_PC1-4")


feature_correlation <- function(ptime, sce, feature="transcript", method="spearman"){
	# browser()
	sce <- sce[,ptime$Sample_ID]
	
	if (feature=="transcript"){
			expression_table <- data.frame(t(counts(sce)))	
	} else if (feature=="gene"){
		sce_trx <- as_tibble(counts(sce), rownames = "enstxp")

		grch38_cols <- c("ensgene", "entrez","chr", "start", "end", "strand", "biotype", "description")

		expression_table <- grch38_tx2gene %>%
			dplyr::left_join(sce_trx, by = "enstxp") %>%
			dplyr::left_join(grch38, by = "ensgene") %>%
			dplyr::select(-grch38_cols) %>% 
			dplyr::group_by(symbol) %>% 
			summarise_at(vars(-enstxp, -symbol), funs(sum)) %>%
			na.omit() %>%
			column_to_rownames(var = "symbol") %>% 
			t() %>% 
			as.data.frame() %>% 
			identity()
		}
	# browser()
	feature_corr <- furrr::future_map_dfc(expression_table, stats::cor, ptime$ptime, method = "spearman")
	
	feature_corr <- as_tibble(cbind(features = names(feature_corr), pseudotime = t(feature_corr)))
	return(feature_corr)
}

gene_correlation <- function(ptime, sce, feature="gene", method="spearman"){
	browser()
	
	sce <- sce[,ptime$Sample_ID]
	
	feature_corr <- furrr::future_map_dfc(expression_table, stats::cor, ptime$ptime, method = "spearman")
	
	feature_corr <- as_tibble(cbind(features = names(feature_corr), pseudotime = t(feature_corr)))
	return(feature_corr)
}

find_corr_of_pt <- function(pseudotimes, pt_names, sce, feature="transcript", method="spearman"){
	# browser()
	fileName <- paste0("/home/skevin/single_cell_tools/", sprintf("%s.rds", digest::digest(pseudotimes)))
	
	corr = purrr::map(pseudotimes, feature_correlation, sce, feature=feature, method=method)
	
	corr = purrr::reduce(corr, dplyr::inner_join, by = "features")
	names(corr) <- c("features", gsub(".csv", "", basename(pt_names)))
	
	corr = na.omit(corr)
	
	corr <- mutate_at(corr, vars(-features), as.numeric)
	
	# pt = purrr::map(pseudotime_files, read_tsv, col_names = c("Sample_ID", "ptime"))
	# names(pseudotimes) <- make.names(gsub(".csv", "", basename(pt_names)))
	# 
	corr_out <- list(corr, pseudotimes)
	
	saveRDS(corr_out, file = fileName)
	
	return(corr_out)
}


```

```{r, eval = T}

pts <- reactive({
	# browser()
	req(input$pseudotime)
	pts <- purrr::map(input$pseudotime$datapath, read_tsv, col_names = c("Sample_ID", "ptime"))
	
})

pt_names <- reactive({
	# browser()
	req(input$pseudotime)
	pt_names <- input$pseudotime$name
	
})

cpts <- reactive({
	# browser()
	req(input$ctrl_pseudotime)
	cpts <- purrr::map(input$ctrl_pseudotime$datapath, read_tsv, col_names = c("Sample_ID", "ptime"))
	
})

cpt_names <- reactive({
	# browser()
	req(input$ctrl_pseudotime)
	cpt_names <- input$ctrl_pseudotime$name
	
})

# pseudotimes <- purrr::map(pseudotime_files, read_tsv, col_names = c("Sample_ID", "ptime"))

```

```{r}

# corr_file <- paste0("/home/skevin/single_cell_tools/", sprintf("%s.rds", digest::digest(pseudotimes)))
```

```{r, eval=T}

# if (file.exists(corr_file)){
# 	corr_list <- readRDS(corr_file)
# } else {
# 	corr_list <- find_corr_of_pt(pseudotime_files, sce())
# }
# 
# corr = corr_list[[1]]
# pt = corr_list[[2]]

corr_list <- reactive({
	corr_file <- paste0("/home/skevin/single_cell_tools/", sprintf("%s_%s.rds", digest::digest(pts()), digest::digest(input$feature)))

	if (file.exists(corr_file)){
		corr_list <- readRDS(corr_file)
	} else {
		corr_list <- find_corr_of_pt(pts(), pt_names(), sce(), input$feature, input$method)
	}

	return(corr_list)
})

pt <- reactive({
	corr_list()[[2]]
})

ptime='X733_PC4.5'

corr <- reactive({
	
	corr <- set_tidy_names(corr_list()[[1]], syntactic = T) %>%
	dplyr::mutate(abs_corr := abs(!!sym(ptime))) %>%
	dplyr::arrange(desc(abs_corr)) %>%
	identity()
	
	return(corr)
	
})





```

```{r setup-cor, eval=F}
ptime='X733_PC4.5'

corr <- set_tidy_names(corr, syntactic = T) %>%
	dplyr::mutate(abs_corr := abs(!!sym(ptime))) %>%
	dplyr::arrange(desc(abs_corr)) %>%
	identity()

# colnames(corr) <- c("features", "ptime")
```

```{r load-func, eval=T}

plot_feature_r <- function(feature, goi, sce, ptime, color="day"){
	# browser()
	feature_expression = counts(sce[feature,ptime$Sample_ID])
	
	feature_expression <- unlist(as.data.frame(feature_expression))
	
	point_colors = factor(sce[,ptime$Sample_ID][[color]])
	
	gg_in <- tibble(Sample_ID = ptime$Sample_ID, ptime = ptime$ptime, expression = feature_expression, point_colors = point_colors)
	
	corr_plot <- ggplot(gg_in, aes(ptime, expression)) + 
		geom_smooth(method = "loess") + 
		geom_point(aes(color=point_colors)) + 
		labs(title = feature)
	print(corr_plot)
	return(corr_plot)

}

plot_features_of_interest <- function(goi, sce, out_filename, ptime, pt, color = 'day'){
	# browser()
	ptime = pt[[ptime]]
	p_list <- lapply(goi$features, plot_feature_r, goi, sce, ptime, color = color)
	return(p_list)
	
}

# test <- plot_features_of_interest(corr[1:8,], sce, "test", ptime, pt, color = 'day')

```

```{r, eval=T}

radioButtons("analysis", "Analysis Scheme", choiceNames = c("Plot User-Supplied Genes", "Plot Top N Features (Genes or Transcripts) with highest correlation"), choiceValues =  c("user", "top_n"), selected = "top_n")

conditionalPanel(
  condition = "input.analysis == 'user'",
  fileInput("user_genes", "file of gene symbols, one per line", multiple = F)
)

conditionalPanel(
  condition = "input.analysis == 'top_n'",
  sliderInput("top_n", "Number of genes to plot, ordered by correlation:",
              min = 0, max = 100, value = 5)
)


```

```{r, eval=T}
DEGS <- reactive({
	# browser()
	corr()[1:input$top_n,]
})
out_filename = "test"
```

```{r, eval=T}
actionButton("plot_features", "plot features (genes or transcripts")
```

```{r, eval=F}
output$trx <- renderText({
    DEGS()[["features"]]
  })

textOutput("trx")
```


```{r, eval = T}
p_list <- eventReactive(input$plot_features, {
	p_list <- plot_features_of_interest(DEGS(), sce(), "test", ptime, pt(), color = 'day')
	
})

renderUI({
	plot_output_list <- lapply(1:length(p_list()), function(i) {
		plotname <- paste("plot", i, sep="")
		plotOutput(plotname)
	})
	do.call(tagList, plot_output_list)
})

observe({
for (i in 1:length(p_list())) {
    local({
        my_i <- i
        plotname <- paste("plot", my_i, sep="")
        output[[plotname]] <- renderPlot({
            p_list()[[my_i]]
        })
    })
}
})
```



```{r, eval = F}


cell_settings <- reactive({
	if(is.null(input$cell_settings)){
		return(NULL) 
	}
	cell_settings <- read_cell_settings(input$cell_settings)
	cell_settings
})

output$cell_sets <- renderUI({
	if (is.null(cell_settings())) return()
  cell_sets <- names(cell_settings())
	checkboxGroupInput(inputId = "cell_sets", label = "filter out cells except", choices = cell_sets)
})

uiOutput("cell_sets")

```






